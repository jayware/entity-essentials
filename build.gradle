buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.0.0'
        classpath 'org.jfrog.buildinfo:build-info-extractor-gradle:4.4.0'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3'
        classpath 'com.netflix.nebula:gradle-lint-plugin:7.9.5'
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.5"
    }
}

plugins {
    id "com.github.hierynomus.license" version "0.14.0"
}

apply from: 'dependencies.gradle'

allprojects {
    apply plugin: 'license'
    apply plugin: 'nebula.lint'
    apply plugin: 'com.jfrog.bintray'
    apply plugin: 'com.jfrog.artifactory'

    group = "org.jayware"

    repositories {
        mavenCentral()
        jcenter()
    }

    license {
        header rootProject.file('HEADER.txt')
        ext.year = Calendar.getInstance().get(Calendar.YEAR)
        skipExistingHeaders = true
        include "**/*.java"
    }

    gradleLint {
        alwaysRun = false
        autoLintAfterFailure = false
        rules = [
                'all-dependency',
                'duplicate-dependency-class'
        ]
    }

    bintray {
        user = System.getProperty('bintray.user')
        key = System.getProperty('bintray.key')
    }

    artifactory {
        contextUrl = 'https://oss.jfrog.org/artifactory/'
        publish {
            repository {
                repoKey = 'oss-snapshot-local'
                username = System.getProperty('artifactory.user')
                password = System.getProperty('artifactory.key')
            }
            publishBuildInfo = true
            publishArtifacts = true
            publishPom = true
        }
        resolve {
            repository {
                repoKey = 'jcenter'
                maven = true
            }
        }
    }
}

configure ([
    project(':entity-essentials-api'),
    project(':entity-essentials-impl'),
    project(':entity-essentials-assertj')
]) {
    project.apply plugin: 'java'
    project.apply plugin: 'osgi'
    project.apply plugin: 'maven'
    project.apply plugin: 'maven-publish'
    project.apply plugin: 'findbugs'
    project.apply plugin: 'jacoco'
    project.apply plugin: 'org.sonarqube'
    project.apply plugin: 'org.junit.platform.gradle.plugin'

    sourceCompatibility = 1.6
    targetCompatibility = 1.6

    findbugs {
        toolVersion = "3.0.1"
        sourceSets = [project.sourceSets.main]
    }

    junitPlatform {
        reportsDir file('build/test-results')
    }

    afterEvaluate {

        jacoco {
            toolVersion = "0.7.9"
            applyTo junitPlatformTest
        }

        task codeCoverageReport(type:JacocoReport, dependsOn: junitPlatformTest){
            executionData junitPlatformTest
            sourceSets sourceSets.main
            sourceDirectories = files(project.sourceSets.main.allSource.srcDirs)
            classDirectories = files(project.sourceSets.main.output)
            reports {
                html.enabled false
                csv.enabled false
                xml.enabled true
                xml.destination file("${buildDir}/reports/jacoco/report.xml")
            }
        }
    }

    sonarqube {
        properties {
            property "sonar.jacoco.reportPaths", file("${buildDir}/jacoco/junitPlatformTest.exec")
        }
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }
}

artifactoryPublish.skip = true
