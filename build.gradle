buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'org.jfrog.buildinfo:build-info-extractor-gradle:4.4.0'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7'
    }
}

plugins {
    id "com.github.hierynomus.license" version "0.13.1"
}

allprojects {
    apply plugin: 'license'
    apply plugin: 'com.jfrog.bintray'
    apply plugin: 'com.jfrog.artifactory'

    group = "org.jayware"

    repositories {
        mavenCentral()
        jcenter()
    }

    license {
        header rootProject.file('HEADER.txt')
        ext.year = Calendar.getInstance().get(Calendar.YEAR)
        skipExistingHeaders = true
        include "**/*.java"
    }

    bintray {
        user = System.getProperty('bintray.user')
        key = System.getProperty('bintray.key')
    }

    artifactory {
        contextUrl = 'https://oss.jfrog.org/artifactory/'
        publish {
            repository {
                repoKey = 'oss-snapshot-local'
                username = System.getProperty('artifactory.user')
                password = System.getProperty('artifactory.key')
            }
            publishBuildInfo = true
            publishArtifacts = true
            publishPom = true
        }
        resolve {
            repository {
                repoKey = 'jcenter'
                maven = true
            }
        }
    }

    plugins.withType(JavaPlugin) {
        project.apply plugin: 'maven'
        project.apply plugin: 'maven-publish'
        project.apply plugin: 'findbugs'

        sourceCompatibility = 1.6
        targetCompatibility = 1.6

        findbugs {
            toolVersion = "3.0.1"
            sourceSets = [sourceSets.main]
        }

        task coveralls(type:Exec, dependsOn: 'generateCoverallsPom') {
            commandLine 'mvn', 'clean', 'install', 'test', 'jacoco:report', 'coveralls:report'
        }

        task generateCoverallsPom << {
            pom {
                project {
                    groupId project.group
                    artifactId project.name
                    version project.version
                }
                withXml {
                    def root = asNode()
                    def properties = root.appendNode('properties')
                    properties.appendNode('project.build.sourceEncoding', 'UTF-8')
                    def repositories = root.appendNode('repositories')
                    def repository = repositories.appendNode('repository')
                    repository.appendNode('id', 'jcenter')
                    repository.appendNode('name', 'bintray')
                    repository.appendNode('url', 'http://jcenter.bintray.com')
                    def build = root.appendNode('build')
                    def plugins = build.appendNode('plugins')
                    def jacoco = plugins.appendNode('plugin')
                    jacoco.appendNode('groupId', 'org.jacoco')
                    jacoco.appendNode('artifactId', 'jacoco-maven-plugin')
                    jacoco.appendNode('version', '0.7.7.201606060606')
                    def executions = jacoco.appendNode('executions')
                    def execution = executions.appendNode('execution')
                    execution.appendNode('id', 'prepare-agent')
                    def goals = execution.appendNode('goals')
                    goals.appendNode('goal', 'prepare-agent')
                    def coveralls = plugins.appendNode('plugin')
                    coveralls.appendNode('groupId', 'org.eluder.coveralls')
                    coveralls.appendNode('artifactId', 'coveralls-maven-plugin')
                    coveralls.appendNode('version', '4.3.0')
                    def configuration = coveralls.appendNode('configuration')
                    configuration.appendNode('repoToken', '${env.COVERALLS_REPO_TOKEN}')
                    def javac = plugins.appendNode('plugin')
                    javac.appendNode('groupId', 'org.apache.maven.plugins')
                    javac.appendNode('artifactId', 'maven-compiler-plugin')
                    javac.appendNode('version', '3.6.0')
                    configuration = javac.appendNode('configuration')
                    configuration.appendNode('source', '1.6')
                    configuration.appendNode('target', '1.6')
                    def surefire = plugins.appendNode('plugin')
                    surefire.appendNode('groupId', 'org.apache.maven.plugins')
                    surefire.appendNode('artifactId', 'maven-surefire-plugin')
                    surefire.appendNode('version', '2.19.1')
                }
            }.writeTo("pom.xml")
        }

        clean{
            delete "pom.xml"
        }

        task sourcesJar(type: Jar, dependsOn: classes) {
            classifier = 'sources'
            from sourceSets.main.allSource
        }

        task javadocJar(type: Jar, dependsOn: javadoc) {
            classifier = 'javadoc'
            from javadoc.destinationDir
        }

        artifacts {
            archives sourcesJar
            archives javadocJar
        }
    }
}

artifactoryPublish.skip = true
